class ArrayList {
    
    field int allocLen, logLen; // allocated length, logical length 
    field Array elems;
    field bool disposeNeeded;

    constructor ArrayList new(int initialSize, bool needDispose) {
        if (initialSize < 0) {
           let initialSize = 10;
        }
        let allocLen = initialSize;
        let logLen = 0;
        let disposeNeeded = needDispose;
        let elems = Array.new(allocLen);
        return this;
    }
    

    // string means pointer only 
    method void add(String data) {
        var Array newElems;
        var int i;

        if (logLen = allocLen) {
            let newElems = Array.new(2 * allocLen);

            let i = 0;
            while (i < logLen) {
                let newElems[i] = elems[i];
                let i = i + 1;
            }
            
            do elems.dispose();
            let allocLen = 2 * allocLen;
            let elems = newElems;
        }
 
        let elems[logLen] = data;
        let logLen = logLen + 1;
        return;
    }

    method void changeAt(String data, int index) {
        if (index = logLen) { 
            do add(data);
            return;
        }
        // if (index > allocLen)
        let elems[index] = data;
        return;
    }

    method bool removeAt(int index){
        return false;
    }

    method String get(int index) {
        if ((index < logLen) | (index > 0)){
            return elems[index];
        }
        do Output.printString("ARRAY ERROR GET");
        return null;
    }

    method void pop() {
        var String elem;
        let logLen = logLen - 1;
        if (disposeNeeded) {
            let elem = elems[logLen];
            do elem.dispose();
        } 
        return;
    }

    method int size(){
        return logLen;
    }

    method int getcapacity() {
        return allocLen;
    }

    method void sortInts() {
        var int i, j, tmp;
        let i = 0;
        while (i < (logLen - 1)) {
            let j = 0;
            while (j < ((logLen - i) - 1)) {
                if(elems[j]>elems[j+1]){
                    let tmp = elems[j];
                    let elems[j] = elems[j+1];
                    let elems[j+1] = tmp;
                }         
                let j = j + 1;   
            }
            let i = i + 1;   
        }
        return;
    }

    method void dispose() {
        var int i;
        var String elem;
        if (disposeNeeded) {
            let i = 0;
            while (i < logLen) {
                let elem = elems[i];
                do elem.dispose();
                let i = i + 1;
            }
        } 
        do elems.dispose();
        do Memory.deAlloc(this);
        return;
    }
}