
class Board {
    
    field bool player;
    field Grid grid;
    field int loc, countShips;
    
    constructor Board new(int location,bool isPlayer) {
        let loc = location;
        let player = isPlayer;
        let grid = Grid.new(10,10);
        let countShips = 0;
        do clearGrid();
        return this;
    }
    

    method void drawBoard() {
        var int i, j;
        let i = 0;
        while (i < 10) {
            let j = 0;
            while (j < 10) {
                do drawGridCell(i,j);
                let j = j + 1;   
            }
            let i = i + 1;   
        }
        return;    
    }

    method bool inBounds(int x, int y) {
        return (x > -1) & (y > -1) & (x < 10) & (y < 10); 
    }

    method bool isMissedCell(int i, int j) {
        return grid.get(i,j) = 2;
    }
    

    method bool isBlownUpCell(int i, int j) {
        return grid.get(i,j) = 4;
    }

    method void drawGridCell(int i, int j) {
        var int pos;
        if (~inBounds(i,j)) {
            return;
        }
        let pos = loc + i + (j*512);
        
        if (grid.get(i,j) = 0) { // just cell
            do Front.drawCell(pos);
        }

        if (grid.get(i,j) = 1) { // alive ship 
            if(player) {
                do Front.drawCircle(pos);
            }
            if(~player) { 
                do Front.drawCell(pos);
            }
        }

        if (grid.get(i,j) = 2) { // missed cell
            do Front.drawX(pos);
        }
        if (grid.get(i,j) = 3) { // damaged ship
            do Front.drawBlackCircle(pos);
        }
        if (grid.get(i,j) = 4) { // drown ship
            do Front.drawBlack(pos);
        }
        return;
    }

    method bool checkIfBlownUp(int i,int j) {
        var int di, dj;
        var bool noBreak;
        let di = 1;
        let dj = 0;
        let noBreak = true;
        while(noBreak & inBounds(i+di, j+dj)) {
            if (grid.get(i + di,j + dj) = 1) {
                return false;
            }
            if(grid.get(i + di,j + dj) = 0){
               let noBreak = false;
            }
            if(grid.get(i + di,j + dj) = 2){
                let noBreak = false;
            }
            let di = di + 1;
        }

        let di = -1;
        let dj = 0;
        let noBreak = true;
        while(noBreak & inBounds(i+di, j+dj)) {
            if (grid.get(i+di,j + dj) = 1) {
                return false;
            }
            if(grid.get(i+di, j + dj) = 0){
                let noBreak = false;
            }
            if(grid.get(i+di, j + dj) = 2){
                let noBreak = false;
            }
            let di = di - 1;
        }
         
        let di = 0;
        let dj = 1;
        let noBreak = true;
        while(noBreak & inBounds(i+di,j+dj)) {
            if (grid.get(i+di, j + dj) = 1) {
                return false;
            }
            if(grid.get(i+di, j + dj) = 0){
                let noBreak = false;
            }
            if(grid.get(i+di, j + dj) = 2){
                let noBreak = false;
            }
            let dj = dj + 1;
        }

        let di = 0;
        let dj = -1;
        let noBreak = true;
        while(noBreak & inBounds(i+di,j+dj)) {
            if (grid.get(i+di, j + dj) = 1) {
                return false;
            }
            if(grid.get(i+di, j + dj) = 0){
                let noBreak = false;
            }
            if(grid.get(i+di, j + dj) = 2){
                let noBreak = false;
            }
            let dj = dj - 1;
        }
        return true;
    }

    method int getPosition(int i , int j) {
        return loc + i + (j*512);
    }

    method void blowUp(int i,int j) {
        var int di, dj;
        var bool noBreak;
        do grid.set(4,i,j);
        if(~player) {
            do Front.whitePoint(getPosition(i, j));
        }
        if(player) {
            do Front.drawBlack(getPosition(i, j));
        }

        let di = 1;
        let dj = 0;
        let noBreak = true;
        while(noBreak & inBounds(i + di, j + dj)) {
            if (grid.get(i + di, j + dj) = 3) {
                do grid.set(4,i + di, j + dj);
                do Front.drawBlack(getPosition(i + di, j + dj));
            }
            if(grid.get(i+di,j + dj) = 0){
                let noBreak = false;
            }
            if(grid.get(i+di,j + dj) = 2){
                let noBreak = false;
            }
            let di = di + 1;
        }

        let di = -1;
        let dj = 0;
        let noBreak = true;
        while(noBreak & inBounds(i + di, j + dj)) {
            if (grid.get(i + di, j + dj) = 3) {
                do grid.set(4, i + di, j + dj);
                do Front.drawBlack(getPosition(i + di, j + dj));
            }
            if(grid.get(i+di, j + dj) = 0){
                let noBreak = false;
            }
            if(grid.get(i+di, j + dj) = 2){
                let noBreak = false;
            }
            let di = di - 1;
        }
         
        let di = 0;
        let dj = 1;
        let noBreak = true;
        while(noBreak & inBounds(i+di, j+dj)) {
             if (grid.get(i + di, j + dj) = 3) {
                do grid.set(4, i + di, j + dj);
                do Front.drawBlack(getPosition(i + di, j + dj));
            }
            if(grid.get(i+di,j + dj) = 0){
                let noBreak = false;
            }
            if(grid.get(i+di,j + dj) = 2){
                let noBreak = false;
            }
            let dj = dj + 1;
        }

        let di = 0;
        let dj = -1;
        let noBreak = true;
        while(noBreak & inBounds(i+di,j+dj)) {
            if (grid.get(i+di,j + dj) = 3) {
                do grid.set(4,i + di, j + dj);
                do Front.drawBlack(getPosition(i + di, j + dj));
            }
            if(grid.get(i+di,j + dj) = 0){
                let noBreak = false;
            }
            if(grid.get(i+di,j + dj) = 2){
                let noBreak = false;
            }
            let dj = dj - 1;
        }
        return;
    }

    method bool shootCell(int i,int j) {
        var int pos ;
        if (~inBounds(i,j)) {
            return false;
        }
        let pos = loc + i + (j*512);
        if(grid.get(i,j) = 0) {
            do grid.set(2,i,j);
            if(~player) {
                do Front.drawXPoint(pos);
            }
            if(player) {
                do Front.drawX(pos);
            }
 
            return false;
        }

        if(grid.get(i,j) = 1) {
            do grid.set(3,i,j);
            if(~player){
                do Front.drawBlackCircleWithPoint(pos);
            }
            if(player){
                do Front.drawBlackCircle(pos);
            }
            if (checkIfBlownUp(i,j)) {
                let countShips = countShips - 1;
                do blowUp(i,j);
            }
            // return true;
        }

        return true;
    }

    method bool placeShip(int x, int y, bool horizontal, int size) {
        var int i,a,b;
        if (horizontal) {
            let i = x;
            while ( i < ( x + size )) {
                 if(~inBounds(i,y)) {
                    return false;
                 }
                    let a = -1;
                    while (a < 2 ) {
                        let b = -1;
                        while (b < 2 ) {
                            if(inBounds(i+a,y+b)) {
                                if(grid.get(i+a,y+b) = 1) {
                                    return false;
                                }
                            }
                            let b = b + 1;
                        }
                        let a = a + 1;
                    }
                
                let i = i + 1;
            }
            let i = x;
            while ( i <(x + size) ) {
                do grid.set(1,i,y);
                // do drawGridCell(i,y);
                let i = i + 1;
            }
        }

        if (~horizontal) { // duplicated
            let i = y;
            while ( i < (y + size) ) {
                if(~inBounds(i,y)) {
                    return false;
                }
                let a = -1;
                while (a < 2 ) {
                    let b = -1;
                    while (b < 2 ) {
                        if(inBounds(x+a,i+b)) {
                            if(grid.get(x+a,i+b) = 1) {
                                return false;
                            }
                        }
                        let b = b + 1;
                    }
                    let a = a + 1;
                }
                let i = i + 1;
            }
            let i = y;
            while ( i < (y + size )) {
                do grid.set(1,x,i);
                // do drawGridCell(x,i);
                let i = i + 1;
            }
        }
        let countShips = countShips + 1;
        return true;
    }

    method int getAliveShipNum(){
        return countShips;
    }

    method void drawCoursoreCell(int i, int j) {
        var int pos ;
        if (~inBounds(i,j)) {
            return;
        }
        let pos = loc + i + (j*512);
        
        if (grid.get(i,j) = 0) { // just cell with point
            do Front.smallPoint(pos);
        }

        if (grid.get(i,j) = 1) { // alive ship 
            if(player) {
                do Front.drawCircleWithPoint(pos);
            }
            if(~player) { 
                do Front.smallPoint(pos);
            }
        }

        if (grid.get(i,j) = 2) { // missed cell
            do Front.drawXPoint(pos);
        }
        if (grid.get(i,j) = 3) { // damaged ship
            do Front.drawBlackCircleWithPoint(pos);
        }
        if (grid.get(i,j) = 4) { // drown ship
            do Front.whitePoint(pos);
        }
        return;
    }

    method bool getShips(ArrayList arr,int x, int y, int dx, int dy) {
        var int size; 
        let size = 1;
        while(inBounds(x+dx, y+dy)) {
            let x = x + dx;
            let y = y + dy;
            if (~(grid.get(x , y) = 1)) {
                // do StringUtils.toString(size);
                // do Output.println();
                do arr.add(size);
                return true;        
            }
            do grid.set(-1,x,y);
            let size = size + 1;
            if (inBounds(x + 1, y + 1)) {
                if (grid.get(x + 1, y + 1) = 1) {
                    return false;
                }
            }
            if (inBounds(x + dy, y + dx)) {
                if (grid.get(x + dy, y + dx) = 1) {
                    return false;
                }
            }
            if (inBounds(x - 1, y + 1)) {
                if (grid.get(x - 1, y + 1) = -1) {
                    return false;
                }
            }
        }
        do arr.add(size);
        return true;
    }

    method bool validateBoard() {
        var int i, j, size, count;
        var ArrayList ships;
        var bool flag;
        let ships = ArrayList.new(7,false);
        let count = 0;
        let i = 0;
        while (i < 10) {
            let j = 0;
            while (j < 10) {
                if(grid.get(i,j) = 1) {
                    // do StringUtils.to(i,j);
                    let flag = true;
                    do grid.set(-1,i,j);
                    if (inBounds(i + 1, j + 1)) {
                        if (grid.get(i + 1,j +1) = 1) {
                            return false;
                        }
                        if((grid.get(i, j + 1) = 1) & (grid.get(i + 1,j) = 1)) {
                            return false;
                        }
                    }
                    if(inBounds(i, j +1)) {
                        if(grid.get(i, j + 1) = 1) {
                            if (~getShips(ships,i,j,0,1)){
                                return false;
                            }
                            let flag = false;
                        }
                    }
                    if(inBounds(i + 1, j)) {
                        if(grid.get(i + 1, j) = 1) {
                            if (~getShips(ships,i,j,1,0)){
                                return false;
                            }
                            let flag = false;
                        }
                    }
                    if (inBounds(i - 1, j + 1)) {
                        if (grid.get(i - 1,j +1) = -1) {
                            return false;
                        }
                    }
                    if(flag) {
                        // add one cell 
                        // do StringUtils.toString(1);
                        do ships.add(1);
                    }
                }
                let j = j + 1;   
            }
            let i = i + 1;   
        }
        let flag = validateShips(ships);
        do ships.dispose();
        if(flag) {
            let countShips = 7;
            do restore();
        }
        return flag;
    }

    method bool validateShips(ArrayList ships) {
        var int i;
        // validate ship num 
        if (~(ships.size() = 7)) {
            return false;    
        }
        do ships.sortInts();
        if(~(ships.get(0) = 1)) {
            return false;
        }
        if(~(ships.get(1) = 1)) {
            return false;
        }
        if(~(ships.get(2) = 2)) {
            return false;
        }
        if(~(ships.get(3) = 2)) {
            return false;
        }
        let i = 4;
        while (i < 7) {
            if(~(ships.get(i) = (i-1))) {
                return false;
            }
            let i = i + 1;   
        }
        return true;
    }

    method void restore(){  
        var int i, j;
        let i = 0;
        while (i < 10) {
            let j = 0;
            while (j < 10) {
                if(grid.get(i,j) = -1) {
                   do grid.set(1,i,j);
                }
                let j = j + 1;   
            }
            let i = i + 1;   
        }
        return;
    }

    method void placeShipCell(int i,int j) {
        if (grid.get(i,j) = 0){
            do grid.set(1,i,j);
            do Front.drawCircleWithPoint(loc + i + (j*512));
            return;
        }
        // if (grid.get(i,j) = 1) {
        //     do grid.set(0,i,j);
        //     do Front.drawCell(loc + i + (j*512));
        // }

        return;
    }
    
    method void clearGrid() {
        var int i, j;
        let i = 0;
        while (i < 10) {
            let j = 0;
            while (j < 10) {
                do grid.set(0,i,j);
                let j = j + 1;   
            }
            let i = i + 1;   
        }
        return;    
    }

    method void dispose() {
        do grid.dispose();
        do Memory.deAlloc(this);
        return;
    }
}