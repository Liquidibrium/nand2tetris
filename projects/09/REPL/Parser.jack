class Parser {

    constructor Parser new() {
        return this;
    }

    function void log(String line) {
        do Output.printString(line);
        do Output.println();
        return;
    }

    function int precendence(char operator) {
        if (StringFunctions.isAdd(operator) | StringFunctions.isSub(operator)) {
            return 1;
        }
        if (StringFunctions.isMult(operator) | StringFunctions.isDiv(operator)) {
            return 2;
        }
        return 0;
    }
    
    function bool isValidChar(char currentChar) {
        if (StringFunctions.isDigit(currentChar)) {
            return true;
        }
        if (StringFunctions.isOpeningBracket(currentChar)) {
            return true;
        }
        if (StringFunctions.isClosingBracket(currentChar)) {
            return true;
        }
        if (StringFunctions.isOperator(currentChar)) {
            return true;
        }
        if (StringFunctions.isSpace(currentChar)) {
            return true;
        }
        return false;
    }

    function Stack infixToPostfix(String infix) {
        var Stack stack; // operators and ( // saves characters 
        var Stack postfix; // converted postfix expression, saves strings
        var int infixLength; // infix expression length 
        var int infixIndex ; // index in infix expression 
        var boolean previousWasOperator;
        var char currentChar;
        var char lastCharFromStack;
        var String lastNumber;
        let infixIndex = 0; 
        let infixLength = infix.length();
        if (infixLength = 0){ 
            let postfix = Stack.new(1, true);
            do postfix.push("Invalid expression!");
            return postfix;
        }
        let postfix = Stack.new(infixLength, true);
        let stack = Stack.new(infixLength, false);
        let previousWasOperator = false;

        while(infixIndex < infixLength) {
            let currentChar = infix.charAt(infixIndex);
            if(Parser.isValidChar(currentChar)){
                if (StringFunctions.isDigit(currentChar)) { // this just works 
                    if ((postfix.size() > 0) & (~previousWasOperator)) {
                        do stack.dispose();
                        do postfix.push("Invalid expression!");
                        return postfix;
                    }
                    let lastNumber = String.new(infixLength);
                    do lastNumber.appendChar(currentChar); 
                    let infixIndex = infixIndex + 1;   
                    if (infixIndex < infixLength) { 
                        let currentChar = infix.charAt(infixIndex); 
                        while ((infixIndex < (infixLength -1)) & StringFunctions.isDigit(currentChar)) {
                            do lastNumber.appendChar(currentChar); 
                            let infixIndex = infixIndex + 1; 
                            let currentChar = infix.charAt(infixIndex); 
                        }
                        if (StringFunctions.isDigit(currentChar)){
                            do lastNumber.appendChar(currentChar);
                        }
                        if (~Parser.isValidChar(currentChar)) {
                            do stack.dispose();
                            do postfix.push("Invalid expression!");
                            return postfix;
                        }
                    }

                    do postfix.push(lastNumber);
                    let previousWasOperator = false;
                }
                if (StringFunctions.isOpeningBracket(currentChar)) {
                    do stack.push(currentChar);
                }
                if (StringFunctions.isClosingBracket(currentChar)) {
                    if(stack.isEmpty() | previousWasOperator) {
                        do stack.dispose();
                        do postfix.push("Invalid expression!");
                        return postfix;
                    }
                    let lastCharFromStack = stack.pop();
                    while(~ StringFunctions.isOpeningBracket(lastCharFromStack)) {
                        do postfix.push(StringFunctions.charToString(lastCharFromStack));
                        if(stack.isEmpty()){
                            do stack.dispose();
                            do postfix.push("Invalid expression!");
                            return postfix;
                        }       
                        let lastCharFromStack = stack.pop();
                    }

                }
                if (StringFunctions.isOperator(currentChar)) {
                    if (postfix.size() = 0) { 
                        // if(~((currentChar = 45) | (currentChar = 47) )) {// - or +   
                        do stack.dispose();
                        do postfix.push("Invalid expression!");
                        return postfix;
                        // } 
                    }
                    while(~stack.isEmpty() &
                         (~(Parser.precendence(currentChar) > Parser.precendence(stack.last())))){
                        do postfix.push(StringFunctions.charToString(stack.pop()));     
                    }
                    do stack.push(currentChar);
                    let previousWasOperator = true;
                }
                if (StringFunctions.isSpace(currentChar)) { 
                   // skip 
                }
                let infixIndex = infixIndex + 1;
            } else {
                do stack.dispose();
                do postfix.push("Invalid expression!");
                return postfix;

            }
        }
        while(~stack.isEmpty()) {
            let currentChar =  stack.pop();
            if(StringFunctions.isOpeningBracket(currentChar)) {
                do postfix.push("Invalid expression!");
                 do stack.dispose();
                return postfix;
            }
            do postfix.push(StringFunctions.charToString(currentChar));     
        }
        do stack.dispose();
        return postfix;
    }

    function String evaluatePostfix(Stack postfix) {
        var String res;
        var Stack st; // saves calculated ints 
        var int postfixSize;
        var int postfixIndex;
        var String currentStr;
        var int first;
        var int second;
        let postfixSize = postfix.size();
        let res = String.new(64); // max line size 
        let postfixIndex = 0;
        let st = Stack.new(postfixSize, false);


        while(postfixIndex < postfixSize) {
            let currentStr = postfix.getItemAt(postfixIndex);
            if (StringFunctions.isOperator( currentStr.charAt(0))) {
                if (st.size() < 2) {
                     do st.dispose();
                    return "Invalid expression!";
                }
                let second = st.pop();
                let first = st.pop();
                if(StringFunctions.isMult(currentStr.charAt(0))) { // *
                  do  st.push(first*second);
                } 
                if(StringFunctions.isAdd(currentStr.charAt(0))) { // +
                   do st.push(first+second);
                }
                if(StringFunctions.isSub(currentStr.charAt(0))) { // -  
                   do st.push(first-second);
                }
                if(StringFunctions.isDiv(currentStr.charAt(0))) { // / 
                   do st.push(first/second);
                }
            } else{
               do st.push(currentStr.intValue());
            }
            let postfixIndex = postfixIndex + 1; 
        }
        if (~(st.size() = 1)) {
            do st.dispose();
            return "Invalid expression!";
        }
        do res.setInt(st.pop());
        do st.dispose();
        return  res;
    }

    function String evaluate(string expression) {
        var Stack postfix;
        var String result;
        let postfix = Parser.infixToPostfix(expression);
        if (StringFunctions.stringEquals(postfix.last(), "Invalid expression!")) { // change 
                do postfix.dispose();
                return postfix.pop();
            }
        let result = Parser.evaluatePostfix(postfix);
        do postfix.dispose();
        return result;
    }

    method void dispose() {
        do Memory.deAlloc(this);  
        return;
   }
   
}