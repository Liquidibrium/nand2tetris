class Stack{
    field Array elements;
    field int allocatedLen;
    field int logicLen;
    field boolean doesElementNeedDisposeToBeCalled;
    constructor Stack new(int intialLength,boolean isElementsPointers) {
        let elements = Array.new(intialLength);
        let allocatedLen = intialLength;
        let logicLen = 0;
        let doesElementNeedDisposeToBeCalled = isElementsPointers;
        return this;
    } 

    method void resize(int size){
        //TODO 
        return ;
    }

    method boolean push(String value) {
        if(logicLen = allocatedLen) {
            return false;
        }
        let elements[logicLen] = value;
        let logicLen = logicLen + 1;
        return true;
    }

    method String pop() {
        if (logicLen = 0) {
            return "Null";
        }
        let logicLen = logicLen - 1;
        return elements[logicLen];
    }

    method String getItemAt(int index){
        if (logicLen = 0){
            return "Null";
        }
        // TODO: if index >= alloclen 
        return elements[index];
    }

    method boolean isEmpty(){
        return logicLen = 0;
    }

    method int size(){
        return logicLen;
    }

    method void dispose(){
        var int index;
        var String temp;
        let index = 0;
        if(doesElementNeedDisposeToBeCalled){
            while(index < logicLen){
                let temp = elements[index];
                do temp.dispose();
                let index = index + 1;
            }
        }
        // for each .dispose () 
        do elements.dispose();
        do Memory.deAlloc(this);  
        return;
    }
    
    method String last(){
        return elements[logicLen-1];
    }

}