// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array powers;
    static int sizeOfInteger;
    /** Initializes the library. */
    function void init() {
        var int i;
        let i = 1;
        let sizeOfInteger = 16;
        let powers = Array.new(16);
        let powers[0] = 1;
        while (i< sizeOfInteger) {
            let powers[i] = powers[i-1] + powers[i-1];
            let i = i + 1;
        }
		return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0){
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        let sum = 0;
        let shiftedX = x;
        let i = 0;
        while (i < sizeOfInteger) {  
            if ( ~((y & powers[i]) = 0)){
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        
        }
        return sum;
    }
   
     
    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int sign;
        let sign = Math.xorSign(x,y);
        let x = Math.abs(x);
        let y = Math.abs(y);
        if (sign < 0){
            return -Math.dividePositiveNumbers(x,y);
        }
        return Math.dividePositiveNumbers(x,y);
    }

    function int dividePositiveNumbers(int x,int y){
        var int q, double, mult; 
        if (x < y) {
            return 0;
        }
        let q = Math.dividePositiveNumbers(x, Math.multiply(y,2));
        let double = Math.multiply(q,2);
        let mult = Math.multiply(double,y);
        if ( x - mult < y){
            return double;
        }
        return (double) + 1;
    }

    

    function int xorSign(int a, int b){
        return ((a | b) & (~(a & b)));
    }


    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, square, next;
        let j = Math.dividePositiveNumbers(sizeOfInteger,2)-1;
        let y = 0;
        while(~(j < 0)){
            let next =  y + powers[j];
            let square = Math.multiply(next, next);
            if ((~(square > x)) & (square > 0 )  ){
                let y =next;
            } 
            let j = j -1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a>b)  { 
            return a; 
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a<b) {
            return a;
        } 
        return b;
    }

    // function int shift(int x, ) {
    //     return x + x ;
    // }
}
