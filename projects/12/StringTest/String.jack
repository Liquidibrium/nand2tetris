// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int currentLength;
    field int allocLength;
    field Array chars;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let currentLength = 0;
        if (maxLength = 0){
          let  maxLength = 1;
        }
        let allocLength = maxLength;
        let chars = Array.new(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do chars.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return currentLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (currentLength = allocLength) { //TODO need to make new String ???  
            return this;
        }
        let chars[currentLength] = c;
        let currentLength = currentLength + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (currentLength = 0){
            return; // system Error ? 
        }
        let currentLength = currentLength - 1;
        return;
    }

    function boolean isDigit(char ch) {
        if((ch > 47) & (ch < 58 )){
            return true;
        }
        return false;
    }


    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, val, d;
        var boolean sign;
        if (currentLength = 0) {
            return 0;
        }
        let val = 0;
        let sign = true;
        let i = 0;
        if (chars[i] = 45){ // '-'
            let sign = false;
            let i = 1;
        }
        while ((i < currentLength) & String.isDigit(chars[i])) { //Todo index out of bound exception might happen 
            let d = chars[i] - 48; // '0'
            let val = val * 10 + d;
            let i = i + 1;
        }
        if (sign){
            return val;
        }    
        return -val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let currentLength = 0;
        do intToString(val);
        return;
    }

    method void intToString(int val){
        var char c ;
        var int quotient, remainder;
        if ( val < 0){
            do appendChar(45); // '-'
            do intToString(-val);
        } else{
            if( val < 10){
                do appendChar(val + 48); // val + "0"
            } else {
                let quotient = val / 10;
                let remainder = val - (10* quotient);
                do intToString(quotient);
                do appendChar(remainder + 48); // remainder + "0"
            }
        }   
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
